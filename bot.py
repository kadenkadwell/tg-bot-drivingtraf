from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import logging
import os
import random
import json
import aiohttp
from keep_alive import keep_alive

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('API_TOKEN')
CHANNEL_USERNAME = '@drivingtraf'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ '@grindingtraffic', –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –¥—Ä—É–≥–æ–π

# –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_keywords():
    try:
        with open('keywords.json', 'r') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ keywords.json: {e}")
        return {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        logging.info(f"User {user_id} status in {CHANNEL_USERNAME}: {member.status}")
        return member.status in ('creator', 'administrator', 'member')
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {e}")
        return False

@dp.message(Command(commands=['start', 'help']))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help."""
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n"
        "–ù–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –≤–∏–¥–µ–æ –Ω–∞ –Ω–∞—à–µ–º YouTube-–∫–∞–Ω–∞–ª–µ.\n"
        f"–ï—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}, —è –ø–æ–ø—Ä–æ—à—É —Ç–µ–±—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π —Å–ª–æ–≤–æ: –¥–µ–≤—É—à–∫–∞ –∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥."
    )
    await message.answer(text)

@dp.message()
async def keyword_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏."""
    if not message.text or message.text.startswith('/'):
        return

    keyword = message.text.lower().strip()
    keywords = load_keywords()
    if keyword in keywords:
        is_subscribed = await check_subscription(message.from_user.id)
        if is_subscribed:
            data = keywords[keyword]
            path = data['path']
            caption = data['caption']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ path URL
            if path and (path.startswith('http://') or path.startswith('https://')):
                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.head(path) as resp:
                            content_type = resp.headers.get('Content-Type', '')
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if 'image' in content_type.lower():
                        await message.answer_photo(photo=path, caption=caption)
                    else:
                        await message.answer_document(document=path, caption=caption)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ URL {path}: {e}")
                    await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞. {caption}")
            elif path and os.path.exists(path):
                # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                try:
                    with open(path, 'rb') as file:
                        await message.answer_document(file, caption=caption)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {path}: {e}")
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. {caption}")
            else:
                # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(caption)
        else:
            await message.answer(
                f"–ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ:\n"
                f"https://t.me/{CHANNEL_USERNAME[1:]}"
            )
    else:
        unknown_responses = [
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ üòî",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–∑ –≤–∏–¥–µ–æ.",
            "–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ —É –º–µ–Ω—è –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.",
            "–ù–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /help."
        ]
        await message.answer(random.choice(unknown_responses))

if __name__ == '__main__':
    keep_alive()
    dp.run_polling(bot)
